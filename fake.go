// Code generated by counterfeiter. DO NOT EDIT.
package iio

import (
	"io"
	"sync"
)

type Fake struct {
	PipeStub        func() (*io.PipeReader, *io.PipeWriter)
	pipeMutex       sync.RWMutex
	pipeArgsForCall []struct{}
	pipeReturns     struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}
	pipeReturnsOnCall map[int]struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}
	CopyStub        func(dst io.Writer, src io.Reader) (written int64, err error)
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		dst io.Writer
		src io.Reader
	}
	copyReturns struct {
		result1 int64
		result2 error
	}
	copyReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Pipe() (*io.PipeReader, *io.PipeWriter) {
	fake.pipeMutex.Lock()
	ret, specificReturn := fake.pipeReturnsOnCall[len(fake.pipeArgsForCall)]
	fake.pipeArgsForCall = append(fake.pipeArgsForCall, struct{}{})
	fake.recordInvocation("Pipe", []interface{}{})
	fake.pipeMutex.Unlock()
	if fake.PipeStub != nil {
		return fake.PipeStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.pipeReturns.result1, fake.pipeReturns.result2
}

func (fake *Fake) PipeCallCount() int {
	fake.pipeMutex.RLock()
	defer fake.pipeMutex.RUnlock()
	return len(fake.pipeArgsForCall)
}

func (fake *Fake) PipeReturns(result1 *io.PipeReader, result2 *io.PipeWriter) {
	fake.PipeStub = nil
	fake.pipeReturns = struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}{result1, result2}
}

func (fake *Fake) PipeReturnsOnCall(i int, result1 *io.PipeReader, result2 *io.PipeWriter) {
	fake.PipeStub = nil
	if fake.pipeReturnsOnCall == nil {
		fake.pipeReturnsOnCall = make(map[int]struct {
			result1 *io.PipeReader
			result2 *io.PipeWriter
		})
	}
	fake.pipeReturnsOnCall[i] = struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}{result1, result2}
}

func (fake *Fake) Copy(dst io.Writer, src io.Reader) (written int64, err error) {
	fake.copyMutex.Lock()
	ret, specificReturn := fake.copyReturnsOnCall[len(fake.copyArgsForCall)]
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		dst io.Writer
		src io.Reader
	}{dst, src})
	fake.recordInvocation("Copy", []interface{}{dst, src})
	fake.copyMutex.Unlock()
	if fake.CopyStub != nil {
		return fake.CopyStub(dst, src)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.copyReturns.result1, fake.copyReturns.result2
}

func (fake *Fake) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *Fake) CopyArgsForCall(i int) (io.Writer, io.Reader) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return fake.copyArgsForCall[i].dst, fake.copyArgsForCall[i].src
}

func (fake *Fake) CopyReturns(result1 int64, result2 error) {
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *Fake) CopyReturnsOnCall(i int, result1 int64, result2 error) {
	fake.CopyStub = nil
	if fake.copyReturnsOnCall == nil {
		fake.copyReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.copyReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pipeMutex.RLock()
	defer fake.pipeMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ IIO = new(Fake)
