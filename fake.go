// Code generated by counterfeiter. DO NOT EDIT.
package iio

import (
	"io"
	"sync"
)

type Fake struct {
	PipeStub        func() (*io.PipeReader, *io.PipeWriter)
	pipeMutex       sync.RWMutex
	pipeArgsForCall []struct{}
	pipeReturns     struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}
	pipeReturnsOnCall map[int]struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Pipe() (*io.PipeReader, *io.PipeWriter) {
	fake.pipeMutex.Lock()
	ret, specificReturn := fake.pipeReturnsOnCall[len(fake.pipeArgsForCall)]
	fake.pipeArgsForCall = append(fake.pipeArgsForCall, struct{}{})
	fake.recordInvocation("Pipe", []interface{}{})
	fake.pipeMutex.Unlock()
	if fake.PipeStub != nil {
		return fake.PipeStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.pipeReturns.result1, fake.pipeReturns.result2
}

func (fake *Fake) PipeCallCount() int {
	fake.pipeMutex.RLock()
	defer fake.pipeMutex.RUnlock()
	return len(fake.pipeArgsForCall)
}

func (fake *Fake) PipeReturns(result1 *io.PipeReader, result2 *io.PipeWriter) {
	fake.PipeStub = nil
	fake.pipeReturns = struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}{result1, result2}
}

func (fake *Fake) PipeReturnsOnCall(i int, result1 *io.PipeReader, result2 *io.PipeWriter) {
	fake.PipeStub = nil
	if fake.pipeReturnsOnCall == nil {
		fake.pipeReturnsOnCall = make(map[int]struct {
			result1 *io.PipeReader
			result2 *io.PipeWriter
		})
	}
	fake.pipeReturnsOnCall[i] = struct {
		result1 *io.PipeReader
		result2 *io.PipeWriter
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pipeMutex.RLock()
	defer fake.pipeMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ IIO = new(Fake)
